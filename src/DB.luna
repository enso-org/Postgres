import Std.Foreign
import Std.Foreign.C.Value

class PGResult:
    ptr :: ManagedPointer None

    def toCArg: self.ptr.ptr.toCArg

    def call name ret args:
        lookupSymbol "pq" ("PQ" + name) . call ret (args.prepend self.toCArg)

    def clear: self.ptr.free

    def rowsCount:
        self . call "ntuples" CInt [] . toInt

    def rows:
        nrows = self.rowsCount
        ncols = self.columnsCount
        0 . upto nrows.pred . each row:
            0 . upto ncols.pred . each col:
                self.getValue row col

    def toJSON:
        nrows = self.rowsCount
        ncols = self.columnsCount
        colHeaders = 0 . upto ncols.pred . each i:
            cn = self.columnName i
            (i, cn)
        res = 0.upto nrows.pred . each r:
            colHeaders.fold JSON.empty (i, cn): json:
                v = self.getValue r i
                json.insert cn v
        res.toJSON

    def columnsCount:
        self . call "nfields" CInt [] . toInt

    def columnName i:
        self . call "fname" CString [CInt.fromInt i . toCArg] . toText

    def getValue row col:
        self . call "getvalue" CString [CInt.fromInt row . toCArg, CInt.fromInt col . toCArg] . toText

class PGConn:
    conn :: ManagedPointer None

    def call name ret args:
        lookupSymbol "pq" ("PQ" + name) . call ret (args.prepend self.conn.ptr.toCArg)

    def status:
        self . call "status" CInt [] . toInt

    def errorMessage:
        self . call "errorMessage" CString [] . toText

    def _mkResult r:
        fin = lookupSymbol "pq" ("PQclear")
        fptr = ManagedPointer None . fromPointer fin r
        PGResult fptr

    def exec command:
        cmd = CString . fromText command
        r = self . call "exec" (Pointer None) [cmd.toCArg]
        cmd . free
        self._mkResult r

    def execParams command paramValues:
        len = CInt.fromInt paramValues.length
        cmd = CString.fromText command
        argsCStr = paramValues.each CString.fromText
        argsArr  = NullTerminatedArray CString . fromList argsCStr
        null = nullPtr.toCArg
        r = self . call "execParams" (Pointer None) [cmd.toCArg, len.toCArg, null, argsArr.toCArg, null, null, CInt.fromInt 0 . toCArg]
        argsCStr.each .free
        cmd.free
        argsArr.free
        self._mkResult r

    def prepare name sql:
        n     = CString.fromText name
        query = CString.fromText sql
        r = self . call "prepare" (Pointer None) [n.toCArg, query.toCArg, CInt.fromInt 0 . toCArg, nullPtr.toCArg]
        n.free
        query.free
        self._mkResult r

    def execPrepared name args:
        len = args.length
        cargs = args . each CString.fromText
        n = CString . fromText name
        argsArr = NullTerminatedArray CString . fromList cargs
        r = self . call "execPrepared" (Pointer None) [n.toCArg, CInt.fromInt len . toCArg, argsArr.toCArg, nullPtr.toCArg, nullPtr.toCArg, CInt.fromInt 0 . toCArg]
        cargs.each .free
        n.free
        argsArr.free
        self._mkResult r

    def finish:
        self.ptr.free

class Postgres:
    def connect args:
        kws     = args . each (CString.fromText _.first)
        kwsArr  = NullTerminatedArray CString . fromList kws
        vals    = args . each (CString.fromText _.second)
        valsArr = NullTerminatedArray CString . fromList vals
        f = lookupSymbol "pq" "PQconnectdbParams"
        r = f . call (Pointer None) [kwsArr.toCArg, valsArr.toCArg, CInt.fromInt 0 . toCArg]
        fin = lookupSymbol "pq" "PQfinish"
        resultPtr = ManagedPointer None . fromPointer fin r
        kws  . each .free
        vals . each .free
        kwsArr.free
        valsArr.free
        PGConn resultPtr

